#!/usr/bin/env python
"""
Script to parse badge classes and extract all metadata.
It is used by badges dashboard to provide static information about badges.
Usually you will want to put output of this script
 in webapps/dashboards/static/badges_meta.json
 (since this file is checked into analytics repository
    refer to it for sample output).

Depends on access to main webapp repository:
 https://khanacademy.kilnhg.com/Code/Website/Group/webapp

Ideally this script would have not been needed at all if only badges had
 their configuration stored somewhere else than python code.

Execution relies on badges/util_badges.py to create full list of static
 badges.
Information about topic exercise badges is added manually, hence, problems
 may occur if this file is out of sync with badges specification in main
 webapp repo.
Furthermore it parses doc string from badge_triggers to get possible triggers
 (not used currently but might be needed in future) and
 badge_context doc string to get context description.
This method isn't ideal and prone to breaking, hence, it's important
 either this script is kept in sync with changes to these modules or
 a better way to store badges information is derived.

If this script becomes executed often it can be transformed to an API
 endpoint on webapp.
If maintaining this script becomes to much of a burden the best thing to do
 is to rewrite badge logic to have configuration stored externally and ideally
 be able to use this configuration.
"""

from optparse import OptionParser
import sys
import os
import json
import re
import datetime


def wrap_doc(badges):
    wrapper = {}
    wrapper["contents"] = badges
    wrapper["created"] = " ".join(["Auto generated on {0}".format(
        datetime.datetime.now()),
        "by tools/parse_badges.py"])
    wrapper["description"] = " ".join(["Cache of badge meta data generated by"
        "tools/parse_badges.py for use by dashboard.khanacademy.org when",
        "serving information about badges.",
        "Example usage can be found at dashboards.khanacademy.org/badges"])

    return wrapper


def parse_badges(directory):
    """
    Import badge classes and produce json with their metadata
    """

    abs_path = os.path.abspath(directory)
    try:
        # gae_bingo instance cache expects this variable to be defined
        os.environ["SERVER_SOFTWARE"] = "Devel"
        # image path route generator uses these to create correct paths
        os.environ["SERVER_NAME"] = "khanacademy.org"
        os.environ["SERVER_PORT"] = "80"

        if not abs_path in sys.path:
            sys.path.insert(1, abs_path)

        # keep imports static - dynamic loading is a mess
        import badges.badges
        import badges.util_badges

        badge_info = {
            "badges": {},
            "topic_exercise_badges": {},
            "categories": {},
            "contexts": {},
            "triggers": {}
        }

        for badge in badges.badges.static_badges:
            badge_export = {
                "name": badge.name,
                "description": badge.description,
                "extended_descritpion": badge.extended_description,
                "context_type": badge.badge_context_type,
                "category": badge.badge_category,
                "points": badge.points,
                "triggers": list(badge.badge_triggers)
            }
            badge_info["badges"][badge.name] = badge_export

        # nasty bit of static definition
        # unfortunately topic_exercise badges are not so static
        topic_exercise = {}
        icon_location = "http://{0}/images/power-mode/badges/".format(
            os.environ["SERVER_NAME"])

        custom_icons = list(
            badges.topic_exercise_badges.TOPICS_WITH_CUSTOM_ICONS)
        custom_icons.append("default")
        topic_exercise["custom_icons"] = custom_icons
        topic_exercise["description"] = "Achieve proficiency in all skills in "
        topic_exercise["icon_src"] = icon_location
        topic_exercise["icon_suffixes"] = {
            "completed_icon": "-completed-40x40.png?9",
            "compact_icon": "-60x60.png?9",
            "icon": "-40x40.png?9",
            "large_icon": "-250x250.png?9"
        }

        badge_info["topic_exercise_badges"] = topic_exercise

        for category in badges.badges.BadgeCategory.all():
            category_export = {
                "category": category.category,
                "label": category.type_label,
                "description": category.description,
                "icon_src": category.icon_src,
                "compact_icon_src": category.compact_icon_src,
                "large_icon_src": category.large_icon_src,
                "medium_icon_src": category.medium_icon_src
            }
            badge_info["categories"][category.category] = category_export

        context_doc = badges.badge_context.BadgeContextType.__doc__
        context_dict = badges.badge_context.BadgeContextType.__dict__
        for name, context in context_dict.iteritems():
            if not name.startswith("__") and not name.endswith("__"):
                # Extract badge description from doc string
                description = re.search(r"(?<={0}: )(.*)$".format(name),
                    context_doc, re.MULTILINE)

                context_export = {
                    "context": context,
                    "name": name,
                    "description": description.group(0)
                }

                badge_info["contexts"][context] = context_export

        trigger_doc = badges.badge_triggers.BadgeTriggerType.__doc__
        trigger_dict = badges.badge_triggers.BadgeTriggerType.__dict__
        regext_template = r"(?<={0}: )(.*)(\n(.*))?(?=\n\s+(When|Include))"
        for name, trigger in trigger_dict.iteritems():
            if not name.startswith("__") and not name.endswith("__"):
                description = re.search(regext_template.format(name),
                    trigger_doc, re.MULTILINE)

                export_description = ""
                if description:
                    export_description = re.sub(r"\s+|\\n", " ",
                        description.group(0))

                trigger_export = {
                    "trigger": trigger,
                    "name": name,
                    "description": export_description
                }

                badge_info["triggers"][trigger] = trigger_export
    finally:
        del os.environ["SERVER_SOFTWARE"]
        del os.environ["SERVER_NAME"]
        del os.environ["SERVER_PORT"]
        sys.path.remove(abs_path)

    return wrap_doc(badge_info)


def output_badges(badges, filename):
    """
    Put collected badges metadata in requested place, either stdout or a file
    """

    output = {}
    if filename and filename != "--":
        output = open(filename, "w")
    else:
        output = sys.stdout

    json.dump(badges, output, sort_keys=True, indent=4)

    if not output.isatty():
        output.close()


def main():
    usage = "Usage: %prog [options] KHAN_WEBAPP_DIRECTORY"
    parser = OptionParser(usage=usage)
    parser.add_option("-o", "--output",
                      dest="output", metavar="OUTPUT",
                      help=("Where to output result json file.",
                       "If missing or value of -- is given outputs to stdout"))

    (options, args) = parser.parse_args()

    # the directory is essential
    if len(args) < 1:
        parser.error("Missing webapp repository location")
    else:
        badges = parse_badges(args[0])
        output_badges(badges, options.output)

if __name__ == "__main__":
    main()
